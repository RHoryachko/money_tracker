import logging
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import BufferedInputFile
from io import BytesIO
from services.api_client import APIClient
from keyboards.main_menu import main_menu_kb

logger = logging.getLogger(__name__)
router = Router()

class DeleteExpenseStates(StatesGroup):
    waiting_for_id = State()

api_client = APIClient()

@router.message(F.text == "–í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É üóë")
async def start_delete_expense(message: types.Message, state: FSMContext):
    report = await api_client.get_expenses_report(user_id=message.from_user.id)
    logger.info("--------------------------------")
    logger.info("Report content: %s", report)
    logger.info("Report type: %s", type(report))
    logger.info("--------------------------------")
    
    if report is None:
        await message.answer(
            "–£ –±–∞–∑—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∏—Ç—Ä–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ –¥–µ—è–∫—ñ –≤–∏—Ç—Ä–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É. üìù",
            reply_markup=main_menu_kb()
        )
        return
    
    await message.answer_document(
        BufferedInputFile(report, filename="all_expenses.xlsx")
    )
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å ID –≤–∏—Ç—Ä–∞—Ç–∏, —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ üóë:")
    await state.set_state(DeleteExpenseStates.waiting_for_id)

@router.message(DeleteExpenseStates.waiting_for_id)
async def process_expense_id(message: types.Message, state: FSMContext):
    try:
        expense_id = int(message.text)
        response = await api_client.delete_expense(user_id=message.from_user.id, expense_id=expense_id)
        if response.get('success'):
            await message.answer("–í–∏—Ç—Ä–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞! ‚úÖ", reply_markup=main_menu_kb())
        else:
            await message.answer("–í–∏—Ç—Ä–∞—Ç–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. üîç")
        await state.clear()
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –≤–∏—Ç—Ä–∞—Ç–∏. üî¢")

def register_delete_expense_handlers(dp):
    dp.register_message_handler(start_delete_expense, text="Delete Expense", state="*")
    dp.register_message_handler(process_expense_id, state=DeleteExpenseStates.waiting_for_id)